package com.sandy.jovenotes.processor.db.dao;

import java.sql.Connection ;
import java.sql.PreparedStatement ;
import java.sql.ResultSet ;
import java.sql.Statement ;
import java.util.ArrayList ;
import java.util.List ;

import org.apache.log4j.Logger ;

import com.sandy.jovenotes.processor.JoveNotesProcessor ;
import com.sandy.jovenotes.processor.db.dbo.CardDBO ;
import com.sandy.jovenotes.processor.util.stat.Stats ;

public class CardDAO extends AbstractDAO {
    
    private static final Logger log = Logger.getLogger( CardDAO.class ) ;

    public static List<CardDBO> getAll( int chapterId )
            throws Exception {
            
        ArrayList<CardDBO> cards = new ArrayList<CardDBO>() ;
        
        final String sql = 
                "SELECT  " +
                "   card_id, " +
                "   notes_element_id, " +
                "   chapter_id, " +
                "   card_type, " +
                "   difficulty_level, " +
                "   content, " +
                "   obj_correl_id, " +
                "   ready " +
                "FROM " +
                "   jove_notes.card " +
                "WHERE " +
                "   chapter_id = ? " + 
                "ORDER BY " + 
                "   card_id ASC";

        Connection conn = JoveNotesProcessor.db.getConnection() ;
        try {
            logQuery( "CardDBO::getAll", sql ) ;
            PreparedStatement psmt = conn.prepareStatement( sql ) ;
            psmt.setInt( 1, chapterId ) ;
            
            ResultSet rs = psmt.executeQuery() ;
            while( rs.next() ) {
                cards.add( new CardDBO( rs ) ) ;
            }
        }
        finally {
            JoveNotesProcessor.db.returnConnection( conn ) ;
        }
        return cards ;
    }

    public static int create( CardDBO card ) throws Exception {

        log.info( "\t    Creating card - " + 
                   card.getCardType() + "::" + card.getObjCorrelId() ) ;
        
        final String sql = "INSERT INTO jove_notes.card ( " +
                           "  notes_element_id, " +
                           "  chapter_id, " +
                           "  card_type, " +
                           "  difficulty_level, " +
                           "  content, " +
                           "  obj_correl_id, " + 
                           "  ready " + 
                           ") " +
                           "VALUES " +
                           "(?, ?, ?, ?, ?, ?, ? )" ;

        int generatedId = -1 ;
        Connection conn = JoveNotesProcessor.db.getConnection() ;
        try {
            logQuery( "CardDBO::create", sql ) ;
            PreparedStatement psmt = conn.prepareStatement( sql, 
                                             Statement.RETURN_GENERATED_KEYS ) ;
            
            psmt.setInt    ( 1, card.getNotesElementId() ) ;
            psmt.setInt    ( 2, card.getChapterId() ) ;
            psmt.setString ( 3, card.getCardType() ) ;
            psmt.setInt    ( 4, card.getDifficultyLevel() ) ;
            psmt.setString ( 5, card.getContent() ) ;
            psmt.setString ( 6, card.getObjCorrelId()  ) ;
            psmt.setBoolean( 7, card.isReady() ) ;
            
            psmt.executeUpdate() ;
            ResultSet rs = psmt.getGeneratedKeys() ;
            if( null != rs && rs.next()) {
                 generatedId = (int)rs.getLong( 1 ) ;
            }
            else {
                throw new Exception( "Autogenerated key not obtained for card." ) ;
            }
            card.setCardId( generatedId ) ;
            
            Stats.cardCreated( card.getCardType() ) ;
        }
        finally {
            JoveNotesProcessor.db.returnConnection( conn ) ;
        }
        return generatedId ;
    }
    
    public static void update( CardDBO card ) throws Exception {
        
        final String sql = "UPDATE jove_notes.card " +
                           "SET " +
                           "  difficulty_level = ?, " +
                           "  content = ? " +
                           "WHERE " +
                           "  card_id = ?" ;

        Connection conn = JoveNotesProcessor.db.getConnection() ;
        try {
            logQuery( "CardDBO::update", sql ) ;
            PreparedStatement psmt = conn.prepareStatement( sql ) ;
            psmt.setInt    ( 1, card.getDifficultyLevel() ) ;
            psmt.setString ( 2, card.getContent() ) ;
            psmt.setInt    ( 3, card.getCardId() ) ;
            
            psmt.executeUpdate() ;
            
            Stats.cardUpdated( card.getCardType() ) ;
        }
        finally {
            JoveNotesProcessor.db.returnConnection( conn ) ;
        }
    }

    public static void delete( CardDBO card ) throws Exception {
        
        final String sql = "DELETE FROM jove_notes.card WHERE card_id = ?" ;

        Connection conn = JoveNotesProcessor.db.getConnection() ;
        try {
            logQuery( "CardDBO::delete", sql ) ;
            PreparedStatement psmt = conn.prepareStatement( sql ) ;
            psmt.setInt ( 1, card.getCardId() ) ;
            
            psmt.executeUpdate() ;
            card.setDeleted( true ) ;
            
            Stats.cardDeleted( card.getCardType() ) ;
        }
        finally {
            JoveNotesProcessor.db.returnConnection( conn ) ;
        }
    }
}
